{
  "courses": [
    {
      "id": 1,
      "name": "ohtu2019",
      "parts": {
        "1": {
          "open": "27.10.2019",
          "close": "3.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "2.11.2019",
          "close": "10.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "8.11.2019",
          "close": "17.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "15.11.2019",
          "close": "24.11.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa4/'>osa3</a> ja <a href='https: //ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "22.11.2019",
          "close": "01.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "4.12.2019",
          "close": "13.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "11.12.2019",
          "close": "20.12.2019",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 2,
      "name": "ohtu-avoin-2020",
      "parts": {
        "1": {
          "open": "16.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "20.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "22.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "24.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa3/'>osa3</a> jälkipuolisko ja <a href=https://ohjelmistotuotanto-hy-avoin.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "26.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy-avoin.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "30.1.2020",
          "close": "30.4.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy-avoin.github.io/'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    },
    {
      "id": 3,
      "name": "ohtu2020",
      "parts": {
        "1": {
          "open": "23.10.2020",
          "close": "1.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin ensimmäisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa1/'>osa1</a></p>"
        },
        "2": {
          "open": "30.10.2020",
          "close": "8.11.2020",
          "desc": "<p>Ilmoittatuminen miniprojektiin alkanut, deadline pe 13.11. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a></p><p>Nämä tehtävät liittyvät kurssin toisen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa2/'>osa2</a></p>"
        },
        "3": {
          "open": "6.11.2020",
          "close": "15.11.2020",
          "desc": "<p>Ilmoittatuminen miniprojektiin alkanut, deadline pe 13.11. Lisää tietoa <a href='https://ohjelmistotuotanto-hy.github.io/miniprojekti/'>täällä!</a></p><p>Nämä tehtävät liittyvät kurssin kolmannen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa3/'>osa3</a> kohtaan 'Tuotannossa tapahtuva testaaminen ja laadunhallinta' asti.</p>"
        },
        "4": {
          "open": "13.11.2020",
          "close": "22.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin neljännen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa4/'>osa3</a> ja <a href='https: //ohjelmistotuotanto-hy.github.io/osa4/'>osa4</a> poislukien ne luvut, joihin on merkitty <span style='color:blue'>viikko 5</span> tai <span style='color:blue'>viikko 6</span>.</p>"
        },
        "5": {
          "open": "20.11.2020",
          "close": "30.11.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin viidennen viikon luentojen asioihin, joita vastaa materiaalin <a href='https://ohjelmistotuotanto-hy.github.io/osa5/'>osa5</a>.</p>"
        },
        "6": {
          "open": "28.11.2020",
          "close": "11.12.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin kuudennen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        },
        "7": {
          "open": "05.12.2020",
          "close": "18.12.2020",
          "desc": "<p>Nämä tehtävät liittyvät kurssin seitsemännen viikon vierailuluentoihin, luentojen tallenteet löytyvät <a href='https://ohjelmistotuotanto-hy.github.io'>kurssisivulta</a>.<br><br>Kysymysten numerot kertovat suunilleen missä järjestyksessä vastaukset löytyvät kultakin luennolta.</p>"
        }
      }
    }   
  ],
  "questions": [
    {
      "id": 201,
      "part": "1",
      "courseId": "3",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat totta?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 202
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista ovat vesiputousmallin heikkouksia?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 203
    },
    {
      "courseId": "3",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 204
    },
    {
      "courseId": "3",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 205
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 206
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 207
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 208
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 209
    },
    {
      "courseId": "3",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },

        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }

      ],
      "part": "1",
      "id": 210
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 211,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    }, 
    {
      "courseId": "3",
      "part": "2",
      "id": 212,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 213,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 214,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 215,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 216,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 217,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 218,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan usein nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 219,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "2",
      "id": 220,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },


    {
      "courseId": "3",
      "part": "3",
      "id": 231,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 232,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 233,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 234,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä jUnitilla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 235,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 236,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Gradle-projekteissa tiedosto build.gradle on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille esim. CircleCI:n"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 237,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva käyttöönotto (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuvaa käyttöönotto sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "3",
      "id": 238,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 241,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 242,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 243,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 244,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 245,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 246,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "4",
      "id": 247,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 251,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 252,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Sykliaika tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 253,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii sykliajan optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 254,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 255,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "5",
      "id": 256,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan jatkuva käyttöönotto (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 261,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 262,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 263,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 264,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 265,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 266,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "6",
      "id": 267,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 271,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 272,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 273,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 274,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 279,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 275,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "3",
      "part": "7",
      "id": 276,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },
    {
      "id": 1,
      "part": "1",
      "courseId": "1",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "käytössä jo olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat totta?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti."
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei tänä päivänäkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 2
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista ovat vesiputousmallin heikkouksia?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa."
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin."
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 3
    },
    {
      "courseId": "1",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 4
    },
    {
      "courseId": "1",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 5
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen mukaan kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituuden saa valita täysin vapaasti"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 6
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen sprintin aikana työskentelee"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 7
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 8
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa"
        },
        {
          "right": false,
          "text": "Asiakkaat voivat antaa palautetta sovelluksesta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 9
    },
    {
      "courseId": "1",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },

        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }

      ],
      "part": "1",
      "id": 10
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 11,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 12,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 13,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 14,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 15,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 16,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 17,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 18,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan usein nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 19,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutustason asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "2",
      "id": 20,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 31,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 32,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 33,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 34,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä jUnitilla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 35,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 36,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Gradle-projekteissa tiedosto build.gradle on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille esim. CircleCI:n"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 37,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva käyttöönotto (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Build pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuvaa käyttöönotto sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "3",
      "id": 38,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 41,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 42,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 43,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 44,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 45,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 46,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "4",
      "id": 47,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 51,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 52,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Sykliaika tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 53,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii sykliajan optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 54,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 55,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "5",
      "id": 56,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan jatkuva käyttöönotto (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 61,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 62,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 63,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 64,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 65,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 66,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "6",
      "id": 67,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 71,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 72,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 73,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 74,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 79,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 75,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "1",
      "part": "7",
      "id": 76,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    },
    {
      "id": 77,
      "part": "1",
      "courseId": "2",
      "title": "Mitkä seuraavista ovat ohjelmiston elinkaaren vaiheita (lifecycle phases)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "asiakkaan vaatimusten selvittäminen"
        },
        {
          "right": true,
          "text": "testaus"
        },
        {
          "right": true,
          "text": "ohjelmointi"
        },
        {
          "right": true,
          "text": "ohjelmiston rakenteen suunnittelu"
        },
        {
          "right": true,
          "text": "jo käytössä olevan ohjelmiston laajentaminen"
        },
        {
          "right": false,
          "text": "ohjelmiston dokumentointi"
        },
        {
          "right": false,
          "text": "suorituskyvyn parantaminen"
        },
        {
          "right": false,
          "text": "asiakastapaamiset"
        }
      ]
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista vesiputousmallia koskevista väitteistä ovat totta?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallia käytettäessä tulee määrittelyn ja suunnittelun tuotokset dokumentoida huolellisesti"
        },
        {
          "right": true,
          "text": "Jos käytetään vesiputousmallia ohjelmoijat eivät tyypillisesti osallistu vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Yksi ensimmäisistä vesiputousmallin puolestapuhujista oli Winston Royce"
        },
        {
          "right": false,
          "text": "Yhdysvaltojen puolustusministeriö eli Department of Defence ei vielä nykyäänkään salli muiden ohjelmistotuotantotapojen kuin vesiputousmallin käyttöä"
        },
        {
          "right": false,
          "text": "Avaruussukkuloiden käyttämä ohjelmisto rakennettiin vesiputousmallilla"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin, sillä niissä on paremmin aikaa suorittaa aluksi perusteellinen vaatimusmäärittely"
        },
        {
          "right": false,
          "text": "Vesiputousmalli sopii erityisen hyvin pitkäkestoisiin projekteihin, sillä niissä on paremmin aikaa suorittaa lopuksi kattava testaus"
        }
      ],
      "part": "1",
      "id": 78
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista ovat vesiputousmallin heikkouksia?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Asiakkaan ei ole helppoa ilmaista sitä miten tilattavan ohjelmiston tulisi toimia"
        },
        {
          "right": true,
          "text": "Jos sovelluksen toteutuksen yksityiskohtia ei ollenkaan huomioida määrittelyn yhteydessä, saatetaan vaatimusmäärittelyyn kirjata asioita joita on aivan liian kallista toteuttaa"
        },
        {
          "right": true,
          "text": "Myöhäisessä vaiheessa havaitut ongelmat saattavat johtaa suuria kustannuksia aiheuttaviin muutoksiin"
        },
        {
          "right": true,
          "text": "Vesiputousmalli ei ota huomioon sovelluksen kehityksen aikana tapahtuvia mahdollisia bisnesympäristön muutoksia"
        },
        {
          "right": false,
          "text": "Vesiputousmalli asettaa liikaa testaamiseen ja laadunhallintaan liittyvää vastuuta ohjelmoijille"
        },
        {
          "right": false,
          "text": "Vesiputousmalli ei ota tarpeeksi huomioon kehitystiimin johtajien mielipiteitä"
        }
      ],
      "part": "1",
      "id": 145
    },
    {
      "courseId": "2",
      "title": "Ketterän manifestin ja sen periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Projektin edistymistä mitataan ensisijaisesti toimivan ohjelmiston etenemisellä"
        },
        {
          "right": true,
          "text": "Muutokseen reagoiminen on tärkeämpää kuin etukäteen laadittujen suunnitelmien noudattaminen"
        },
        {
          "right": true,
          "text": "Asiakkaalle kannattaa toimittaa käyttökelpoisia ohjelmiston versioita niin usein kuin mahdollista"
        },
        {
          "right": false,
          "text": "Dokumentointi ei ole tärkeää"
        },
        {
          "right": false,
          "text": "Yksilön vaikutus ohjelmistoprojektissa kannattaa minimoida"
        },
        {
          "right": false,
          "text": "Kommunikointi kannattaa ensisijaisesti hoitaa pikaviestimien avulla"
        },
        {
          "right": false,
          "text": "Tärkeiden deadlinejen koittaessa kehitystiimin tulee työskennellä normaalia suuremmalla intensiteetillä jotta ketteryys säilytetään"
        }
      ],
      "part": "1",
      "id": 80
    },
    {
      "courseId": "2",
      "title": "Ketterän manifestin periaatteiden mukaan",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sen lisäksi, että ketterässä kehityksessä vaatimukset voivat vaihtua, voi myös tiimi vaihtaa tarpeen mukaan toimintatapojaan"
        },
        {
          "right": true,
          "text": "Ohjelmistokehittäjille kannattaa antaa vapaus ja vastuu päättää omista työtavoista"
        },
        {
          "right": true,
          "text": "On oleellista että ohjelmistokehittäjät käyvät tiivistä interaktiota loppukäyttäjien kanssa"
        },
        {
          "right": true,
          "text": "Kannattaa suosia mahdollisimman yksinkertaisia ratkaisuja"
        },
        {
          "right": false,
          "text": "Ohjelmistoarkkitehdin rooli on keskeinen projektien onnistumisen kannalta"
        },
        {
          "right": false,
          "text": "Ketterässä kehittämisessä ohjelmiston laadulla ei ole kovin suurta merkitystä, pääasia on toteuttaa asiakkaalle mahdollisimman nopeasti uutta toiminnallisuutta"
        },
        {
          "right": false,
          "text": "Ohjelmistosta ei kannata tuottaa uusia versiota liian usein"
        }
      ],
      "part": "1",
      "id": 81
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product ownerin kannattaa olla hyvin selvillä ohjelmiston käyttäjien tarpeista"
        },
        {
          "right": true,
          "text": "Scrum ei suosittele yli kymmenen hengen tiimejä"
        },
        {
          "right": true,
          "text": "Scrumissa on mahdollista ja jopa suositeltavaa vaihtaa tarpeen vaatiessa kehitystiimin toimintatapoja"
        },
        {
          "right": false,
          "text": "Sprintin pituudelle ei ole asetettu mitään rajoitteita"
        },
        {
          "right": false,
          "text": "Scrumin tehokas soveltaminen on suoraviivaista sillä sen 'pelisäännöt' määrittelevä Scrum guide on vaan noin 15 sivua pitkä."
        },
        {
          "right": false,
          "text": "Scrum antaa tarkan ohjeistuksen sille miten sovelluskehittäjän tulee toimia"
        }
      ],
      "part": "1",
      "id": 82
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Product owner määrää sen mitä ja missä järjestyksessä toiminnallisuutta toteutetaan sovellukseen"
        },
        {
          "right": true,
          "text": "Jos joku tiimin ulkopuolinen pyytää sprintin aikana kehitystiimiä toteuttamaan välittömästi jonkin uuden ja briljantin idean, tulee scrum masterin puuttua asiaan"
        },
        {
          "right": true,
          "text": "Scrum master auttaa byrokraattisten ongelmien (esim. kehitystiimillä ei ole käytössä sopivaa palvelinympäristöä) ratkaisemisessa"
        },
        {
          "right": false,
          "text": "Scrum master antaa työmääräarviot sovellukseen toteutettaville toiminnallisuuksille"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjät eivät saa lisätä uusia vaatimuksia product backlogille ilman product ownerin lupaa"
        },
        {
          "right": false,
          "text": "Scrum master päättää minkä asian parissa kukin kehitystiimin jäsen työskentelee sprintin aikana"
        },
        {
          "right": false,
          "text": "Product owner työskentelee scrum masterin alaisuudessa"
        }
      ],
      "part": "1",
      "id": 83
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kehittäjätiimissä tulisi olla osaamista myös sovelluksen testaamiseen"
        },
        {
          "right": true,
          "text": "Scrum suosittelee että tiimi määrittelee yhteisen laatustandardin, joka määrittelee mitä kaikkea toiminnallisuuden toteuttaminen valmiiksi asti pitää sisällään"
        },
        {
          "right": false,
          "text": "Lähellä deadlineja myös puutteellisesti toteutetut käyttäjävaatimukset voidaan hyväksyä osaksi sprintissä julkaistavaa ohjelmistoversiota"
        },
        {
          "right": false,
          "text": "Scrum master määrittelee kehitystiimin työskentelytavat"
        },
        {
          "right": false,
          "text": "Kehitystiimi saa itse valita mitä käyttäjän vaatimuksia se kussakin sprintissä toteuttaa"
        },
        {
          "right": false,
          "text": "Yhden sprintin aikana toteutetut vaatimukset testataan yleensä vasta seuraavassa sprintissä"
        },
        {
          "right": false,
          "text": "Scrum suosittelee, että järjestelmäylläpitäjät eivät työskentele osana Scrum-tiimejä"
        }
      ],
      "part": "1",
      "id": 84
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelussa päätetään mitä seuraavan sprintin aikana on tarkoitus toteuttaa"
        },
        {
          "right": true,
          "text": "Daily scrum -palavereissa on tarkoitus tuoda esiin seikkoja, jotka mahdollisesti hidastavat kehitystyötä"
        },
        {
          "right": true,
          "text": "Sprintin katselmointien (sprint review) yhteydessä saatetaan product backlogille lisätä uusia vaatimuksia"
        },
        {
          "right": false,
          "text": "Product owner ei osallistu sprintin suunnitteluun. Sille ei ole tarvetta, sillä kehittäjätiimi työskentelee itseorganisoituvasti"
        },
        {
          "right": false,
          "text": "Termit sprint backlog ja product backlog tarkottavat käytännössä samaa asiaa"
        },
        {
          "right": false,
          "text": "Asiakkaat antavat sovelluksesta palautetta Daily scrum -palaverissa"
        },
        {
          "right": false,
          "text": "Sprintin katselmoinnissa (sprint review) jokainen sovelluskehittäjä raportoi omista sprintin aikaisista tekemisistään scrum masterille"
        }
      ],
      "part": "1",
      "id": 85
    },
    {
      "courseId": "2",
      "title": "Mitkä seuraavista Scrumiin liittyvistä väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiivin tarkoituksena on optimoida sovelluskehittäjien työskentelytapaa"
        },
        {
          "right": true,
          "text": "Scrum ei ota kantaa siihen miten sovellus testataan"
        },
        {
          "right": true,
          "text": "Inspect-and-adapt -periaatteen takia product backlog saatetaan joutua priorisoimaan uudelleen"
        },
        {
          "right": false,
          "text": "Retrospektiivissä priorisoidaan product backlog tarpeen vaatiessa uudelleen"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei kannata paljastaa sprintin alussa esiin tulevia vaikeuksia. Koska tiimit ovat itseorganisoituja, ei ole mitään tarvetta kertoa ongelmista ulkopuolisille liian aikaisin, sillä ongelmat ratkeavat yleensä ajan kanssa"
        },
        {
          "right": false,
          "text": "ScrumBut sopii erityisesti suurien ohjelmistoprojektien hallitsemiseen"
        }
      ],
      "part": "1",
      "id": 86
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 87,
      "title": "Mitkä seuraavista vaatimusmäärittelyä koskevista väittämistä pitävät paikkansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään mitä toiminnallisuutta kehitteillä olevaan ohjelmistoon halutaan"
        },
        {
          "right": true,
          "text": "Vaatimusmäärittelyn aikana selvitetään minkälaisessa toimintaympäristössä kehitettävän sovelluksen on tarkoitus toimia"
        },
        {
          "right": true,
          "text": "Lainsäädännölliset rajoitukset, kuten GDPR tulee huomioida sovelluksen vaatimusmäärittelyn aikana"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan laatuvaatimus (quality attribute) voisi olla 'Asiakas voi lisätä tuotteen ostoskoriin'"
        },
        {
          "right": false,
          "text": "Eräs verkkokaupan toiminnallinen (functional requirement) vaatimus voisi olla 'Verkkokauppan on toimittava kaikilla moderneilla web-selaimella'"
        },
        {
          "right": false,
          "text": "Vaatimusten validoinnilla tarkoitetaan niiden dokumentoimista kirjallisessa muodossa, esim. ohjelmistotiimin Wikisivulla"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 88,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "MVP:n (minimal viable product) avulla voidaan tutkia ideoiden, esim. ohjelmiston potentiaalisten uusien ominaisuuksien, käyttökelpoisuutta"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmän tarkoituksena on oppia käyttäjien mieltymyksiä seuraamalla miten he sovellusta käyttävät"
        },
        {
          "right": false,
          "text": "A/B-testauksen avulla voidaan varmistua että järjestelmä toimii oikein poikkeuksellisissakin tilanteissa"
        },
        {
          "right": false,
          "text": "Vesiputousmallin hyvä puoli on se, että vaatimusmäärittelyä voidaan tarkentaa koko ohjelmistokehityksen ajan"
        },
        {
          "right": false,
          "text": "Eräs ketterien menetelmien ongelmista on se, että asiakas ei osaa ilmaista vaatimuksia riittävän hyvin ohjelmistokehitysprojektien alussa"
        },
        {
          "right": false,
          "text": "Lean startup -menetelmä sopii epämääräisyytensä takia oikeastaan vaan startup-yrityksille"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 89,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storylle kannattaa kirjata hyväksymäkriteerit, eli esim. joukko testejä joiden avulla voidaan todeta storyn olevan toteutettu halutulla tavalla"
        },
        {
          "right": true,
          "text": "Ennen user storyn kuvaaman toiminnallisuuden toteuttamista on oleellista kommunikoida riittävästi product ownerin tai asiakkaan edustajan kanssa"
        },
        {
          "right": true,
          "text": "'Opiskelijan tulee pystyä tarkastelemaan seuraavan periodin opetustarjontaa' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "User storyyn kirjataan tarkasti kaikki loppukäyttäjän sille asettamat vaatimukset"
        },
        {
          "right": false,
          "text": "'Opiskelijoiden tiedot talletetaan tietokantaan' on hyvä muotoilu user storylle"
        },
        {
          "right": false,
          "text": "Mike Cohn ja Ron Jeffries ovat erimielisiä siitä, mitä user storyn määritelmä pitää sisällään"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 90,
      "title": "Mitkä seuraavista user storyja koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": false,
          "text": "User storyn tekstuaalinen kuvaus on aina kirjattava muodossa 'As a _user_, I want _functionality_ so that _business value_'"
        },
        {
          "right": false,
          "text": "Kaikki product backlogille asti päätyvät user storyt ovat projektin kannalta suunilleen yhtä tärkeitä saada toteutettua"
        },
        {
          "right": false,
          "text": "User storyjen on aina noudatettava INVEST-kriteerejä"
        },
        {
          "right": false,
          "text": "Jos user story lisätään product backlogille, sen sisältöä ei saa enää muuttaa"
        },
        {
          "right": false,
          "text": "Suuren teknisen riskin sisältävän toiminnallisuuden kuvaamat user storyt kannattaa toteuttaa vasta ihan projektin lopussa, näin niissä epäonnistuminen ei laske liian aikaisessa vaiheessa sovelluskehittäjien mielialaa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 91,
      "title": "Mitkä seuraavista user storyjen estimointia koskevista väitteistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suhteellisessa estimoinnissa verrataan user storyjen työmäärää muiden user storyjen vaatimaan työmäärään"
        },
        {
          "right": true,
          "text": "Työmääräarvioissa tulee huomioida definition of done eli projektissa sovittu yleinen laatutaso"
        },
        {
          "right": true,
          "text": "Työmääräarviot auttavat asiakasta user storyjen priorisoinnissa"
        },
        {
          "right": false,
          "text": "On kehitetty menetelmiä (esim. planning poker), joiden avulla ohjelmiston tekemiseen vaadittava työmäärä voidaan arvioida kohtuullisen tarkasti jo ennen projektin käynnistymistä"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien parhaiden käytänteiden mukaista on antaa product ownerin ja scrum masterin hoitaa työmääräarviointi"
        },
        {
          "right": false,
          "text": "Työmääräarvioita ei tule muuttaa kesken projektin, sillä ne ovat lupaus asiakkaalle siitä milloin sovellus tulee valmistumaan"
        },
        {
          "right": false,
          "text": "Cone of uncertainity kuvaa sitä, että mitä kokeneempi sovelluskehittäjä on, sitä parempia työmääräarvioita hän pystyy tekemään"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 92,
      "title": "Mitkä seuraavista hyvää product backlogia koskevista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "User storyjen prioriteetti voi muuttua ajan kuluessa"
        },
        {
          "right": true,
          "text": "Sprinttiin toteutettavaksi valittavien user storyjen tulee olla riittävän pieniä"
        },
        {
          "right": true,
          "text": "Backlogille lisätään tarpeen mukaan uusia user storyja"
        },
        {
          "right": false,
          "text": "Backlogin sisältöä saa muuttaa ainoastaan sprintin suunnittelukokouksissa"
        },
        {
          "right": false,
          "text": "Jokaisen backlogille lisätyn user storyn täytyy sisältää tarkat hyväksymäkriteerit"
        },
        {
          "right": false,
          "text": "Jokainen backlogilla oleva user story täytyy toteuttaa, muuten projekti tuomitaan epäonnistuneeksi"
        },
        {
          "right": false,
          "text": "Kun user story on toteutettu valmiiksi, sanotaan että story on ready"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 93,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tuotteen tai julkaisun burndown-kaavion avulla pystytään visualisoimaan jäljellä olevaa tekemättömän työn määrää"
        },
        {
          "right": true,
          "text": "User story mapping -tekniikka ryhmittelee user storyt toiminnallisiin loogisiin kokonaisuuksiin"
        },
        {
          "right": false,
          "text": "Tiimin velositeetilla tarkoitetaan sitä kuinka monta riviä koodia tiimi pystyy keskimäärin tuottamaan yhden sprintin aikana"
        },
        {
          "right": false,
          "text": "Velositeetin perusteella voidaan helposti vertailla mikä firman ohjelmistokehitystiimeistä on suorituskyvyltään paras"
        },
        {
          "right": false,
          "text": "Tiimin velositeettiin lasketaan jokainen sprintin aikana tehty koodirivi"
        },
        {
          "right": false,
          "text": "NoEstimates-liike on sitä mieltä että user storyjen estimointia ei tarvita ja siitä ei ole mitään hyötyä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 94,
      "title": "Mitkä seuraavista väittämistä pitävät paikkansa",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ei ole hyvä ottaa sprinttiin toteutettavaksi sellaista user storya jonka vaatimasta työmäärästä ei ole kellään minkäänlaista käsitystä"
        },
        {
          "right": true,
          "text": "Product owner pystyy priorisoinnin avulla vaikuttamaan siihen, mitä user storyja sprinttiin valitaan"
        },
        {
          "right": true,
          "text": "Velositeetin avulla voidaan arvioida kuinka paljon työtä yhteen sprinttiin kannattaa ottaa"
        },
        {
          "right": false,
          "text": "Sprintin tavoitteella tarkoitetaan sprinttiin valittuja user storyja"
        },
        {
          "right": false,
          "text": "Product owner määrää kuinka monta user storya kehitystiimi ottaa tiettyyn sprinttiin toteutettavaksi"
        },
        {
          "right": false,
          "text": "Jos user story on liian suuri toteutettavaksi yhdessä sprintissä, se kannattaa jakaa kahtia siten, että toinen keskittyy pelkään käyttöliittymään ja toinen bisneslogiikkaan ja tietokantaan"
        },
        {
          "right": false,
          "text": "Spike-ratkaisuilla saadaan usein nopeutettua sovelluskehitystä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 95,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Sprintin suunnittelun yhteydessä joudutaan miettimään myös sovelluksen toteutukseen liittyviä asioita"
        },
        {
          "right": true,
          "text": "Taskboardiksi organisoitu sprint backlog visualisoi kunkin tehtävän eli taskin statuksen"
        },
        {
          "right": false,
          "text": "Sprint backlogille laitettavat taskit tulee aina kirjoittaa asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": false,
          "text": "Product owner määrää mitä sarakkeita sprintin backlogina toimivalla taskboardilla on"
        },
        {
          "right": false,
          "text": "Sprintin burndown-käyrän avulla on mahdollista seurata kuinka paljon työtunteja kehittäjillä on vielä jäljellä kyseisessä sprintissä"
        },
        {
          "right": false,
          "text": "Jos taskien työmäärä on arvioitu tunteina, tulee taskiin käytetty työaika päivän päätteeksi aina vähentää työmääräarviosta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "2",
      "id": 96,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "WIP-rajoitteiden avulla voidaan yrittää pienentää riskiä sille, että sprintin aikana ehditään toteuttamaan useita user storyja ainoastaan osittain"
        },
        {
          "right": true,
          "text": "Retrospektiivi on hyvä hetki tarkastella ja modifioida sprintin taskboardia, esim. lisätä siihen WIP-rajoitteita"
        },
        {
          "right": true,
          "text": "On itseasiassa hiukan kiistanalaista kannattaako sprint backlogilla oleville taskeille antaa työmääräarvioita"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä noudatetaan aina 2 viikon pituisia sprinttejä"
        },
        {
          "right": false,
          "text": "ScrumBan-menetelmässä on tyypillistä, että jokainen sovelluskehittäjä työskentelee yhtä aikaa usean eri user storyn parissa"
        },
        {
          "right": false,
          "text": "Backlog grooming tehdään aina kahden sprintin välissä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 107,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Vesiputousmallissa asiakas validoi vaatimukset lukemalla vaatimusmäärittelyn tuloksena olevaa dokumentaatiota"
        },
        {
          "right": true,
          "text": "Staattisen analyysin avulla voidaan tarkastella automatisoidusti noudattaako koodi määriteltyjä tyyliseikkoja, esim. oikeaoppista sisennystä"
        },
        {
          "right": true,
          "text": "Pariohjelmoinnin on todettu vähentävän koodiin jäävien bugien määrää"
        },
        {
          "right": false,
          "text": "Koodin katselmoinnissa testataan kaatuuko sovellus sattumanvaraisilla syötteillä"
        },
        {
          "right": false,
          "text": "Ohjelmiston verifioinnilla tarkoitetaan sen varmistamista, että ollaan ylipäätään tekemässä ohjelmistoa, joka on käyttäjän tarpeisiin sopiva"
        },
        {
          "right": false,
          "text": "Ketterät menetelmät ja vesiputousmalli poikkeavat monin paikoin, mutta vaatimusten validointi tapahtuu molemmissa suunilleen samalla tavalla"
        },
        {
          "right": false,
          "text": "XP:n koodin yhteisomistajuuden periaate tarkoittaa sitä, että koodi julkaistaan Open source -lisenssillä kaikkien vapaaseen käyttöön"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 108,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston ulkoisella laadulla tarkoitetaan sitä, onko ohjelmisto sopiva käyttötarkoitukseensa, eli toimiiko se niin kuin käyttäjä haluaa ja olettaa"
        },
        {
          "right": true,
          "text": "Järjestelmätestauksessa sovelluksen toimintaa tutkitaan usein saman rajapinnan kautta, miten loppukäyttäjä sovellusta käyttää"
        },
        {
          "right": true,
          "text": "Testitapauksia mietittäessä kannattaa valita sellaisia testisyötteitä, jotka toimivat järjestelmän kannalta erilaisella tavalla, eli mitkä eivät kuulu samaan ekvivalenssiluokkaan"
        },
        {
          "right": false,
          "text": "Käyttäjän hyväksymistestauksessa verrataan sovellusta toimintaa vaatimusmäärittelyyn"
        },
        {
          "right": false,
          "text": "Black box -testauksen suorittavat aina sovelluskehittäjät"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 109,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Yksikkötestaus on useimmiten ns. developer-testausta, eli sovelluskehittäjien vastuulla"
        },
        {
          "right": true,
          "text": "Huono sisäinen laatu saattaa vaikeuttaa sovelluksen jatkokehittämistä"
        },
        {
          "right": true,
          "text": "Haarautumakattavuutta mittaamalla voidaan löytää ehtolauseita, joiden kaikkia haaroja ei ole testattu"
        },
        {
          "right": true,
          "text": "Mutaatiotestauksen ideana on varmistaa, että testit huomaavat sen jos koodiin tulee bugeja"
        },
        {
          "right": false,
          "text": "Lasilaatikkotestauksella testataan sovelluksen tarjoamaa käyttökokemusta, eli se kohdistuu lähinnä käyttöliittymän testaamiseen"
        },
        {
          "right": false,
          "text": "Jos koodin rivikattavuus on 100%, voidaan olla lähes varmoja, että koodi toimii oikein"
        },
        {
          "right": false,
          "text": "Yksikkötestaus suoritetaan useimmiten ohjelman tilaajaorganisaation toimesta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 110,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiotestauksessa pyritään varmistamaan sovelluksen suurempien, useimmista luokista tai moduuleista koostuvien kokonaisuuksien toiminta"
        },
        {
          "right": true,
          "text": "Regressiotestaus pyrkii varmistamaan, että ohjelmiston jo aiemmin toimineet osat eivät hajoa uusien muutosten yhteydessä"
        },
        {
          "right": true,
          "text": "Regressiotestejä on mahdollista tehdä jUnitilla"
        },
        {
          "right": false,
          "text": "Eräs ketterän kehityksen hyvistä puolia on se, että regressiotestaukselle ei käytännössä ole mitään tarvetta"
        },
        {
          "right": false,
          "text": "Ketterässä kehityksessä koodin integraatiotestauksen suorittaa kehittäjäorganisaation QA-tiimi"
        },
        {
          "right": false,
          "text": "Ketterä kehitys ja vesiputousmalli ovat monin paikoin hyvin erilaisia menetelmiä. Koodin integrointi ja integraatiotestaus tapahtuu kuitenkin molemmissa samalla tavalla"
        },
        {
          "right": false,
          "text": "Regressiotestaus tapahtuu lähes aina manuaalisesti"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 111,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa kirjoitetaan käytännössä aina yksi testi joka ei mene läpi ja sen jälkeen mahdollisimman yksinkertainen koodi, joka läpäisee testin"
        },
        {
          "right": true,
          "text": "Oikeaoppista TDD:tä sovellettaessa koodin sisäistä rakennetta parannellaan jos huomataan sen rapistuneen, tällöin testien halutaan edelleen menevän läpi"
        },
        {
          "right": true,
          "text": "Mock-olioita käytetään testauksessa varmistamaan, että testattava olio tai metodi kommunikoi riippuvuuksiensa kanssa oikein"
        },
        {
          "right": false,
          "text": "TDD:n ikävä puoli on se, että koodista saattaa tulla sen soveltamisen seurauksena ylläpidettävyydeltään huonoa"
        },
        {
          "right": false,
          "text": "TDD soveltuu erityisen hyvin ns. legacy-järjestelmien, eli vanhojen ja ylläpidettävyyden kannalta hankalien ohjelmistojen laajentamisen välineeksi"
        },
        {
          "right": false,
          "text": "Oikeaoppista TDD:tä käytettäessä ohjelmoitavat luokat ja metodit tulee aina suunnitella erittäin tarkasti ennen ohjelmoinnin aloittamista"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 112,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Integraatiohelvetti viittaa siihen, että vasta ohjelmintivaiheen lopussa tapahtuva luokkien ja komponenttien integrointi aiheuttaa useimmiten suuria ongelmia, riippumatta siitä miten huolellisesti ohjelmisto on suunniteltu"
        },
        {
          "right": true,
          "text": "Jatkuva integraatio pyrkii tuomaan koodin komponenteissa olevat yhteensopivuusongelmat esille niin nopeasti kuin mahdollista"
        },
        {
          "right": true,
          "text": "On oleellista jatkuvan integraation suorittamisen kannalta, että Gradle-projekteissa tiedosto build.gradle on lisätty versionhallintaan"
        },
        {
          "right": false,
          "text": "Smoke testiksi kutsutaan testiä, missä järjestelmä yritetään saada kaatumaan tai 'savuamaan' kuormittamalla sitä äärimmäisen suurella operaatiomäärällä"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation noudattaminen on helppoa, riittää kun joku konfiguroi tiimille esim. CircleCI:n"
        },
        {
          "right": false,
          "text": "Jos jatkuvan integraation palvelin huomaa koodissa jonkin ongelman, riittää että ongelma korjataan seuraavan sprintin alkuun mennessä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 113,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Jatkuva käyttöönotto (continuous deployment) vaatii erittäin suurta automaation astetta testauksen ja sovelluksen tuotantoon viemisen suhteen"
        },
        {
          "right": true,
          "text": "Jatkuvaa toimitusvalmius (continuous delivery) automatisoi ohjelmiston laadunhallinnan, mutta jättää ihmisen ratkaistavaksi missä vaiheessa uusia versiota julkaistaan loppukäyttäjille"
        },
        {
          "right": true,
          "text": "Staging-ympäristön on konfuguraatioiltaan syytä olla mahdollisimman lähellä sovelluksen tuotantoympäristöä"
        },
        {
          "right": false,
          "text": "Deployment pipelinen käyttö nopeuttaa ohjelmakoodin kääntämistä rinnakkaistamalla käännöksen vaiheet useille eri koneille"
        },
        {
          "right": false,
          "text": "Jatkuvaa käyttöönotto (continuous deployment) sopii ainoastaan hyvin pienille yrityksille, esimerkiksi alkuvaiheessa oleville start upeille"
        },
        {
          "right": false,
          "text": "Staging-ympäristö ja CI-palvelin tarkoittavat samaa asiaa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "3",
      "id": 114,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Tutkiva testaus kannattaa kohdistaa sprintin aikana toteutettuihin uusiin toimintoihin"
        },
        {
          "right": true,
          "text": "Kokenut testaaja voi löytää tutkivaa testaamista käyttäen virheitä, jotka jäävät helposti automatisoitujen testien ulottumattomiin"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen sopii erityisen hyvin regressiotestaukseen"
        },
        {
          "right": false,
          "text": "Jos ohjelmistoprojektissa tehdään paljon tutkivaa testaamista, ei yksikkö- ja integraatiotestausta tarvitse tehdä"
        },
        {
          "right": false,
          "text": "Tutkiva testaaminen perustuu testitapausten huolelliseen etukäteissuunnitteluun"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 117,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Canary releaseissa osa todellisista loppukäyttäjistä ohjataan käyttämään järjestelmän uutta versiota"
        },
        {
          "right": true,
          "text": "Feature toggle on eräs tekniikka canary releasejen toteuttamiseen"
        },
        {
          "right": true,
          "text": "Canary releaseja käytettäessä sovelluksen toimintaa on monitoroitava tarkasti"
        },
        {
          "right": true,
          "text": "Feature togglen avulla koodissa olevia keskeneräisiä toiminnallisuuksia voidaan piilottaa loppukäyttäjiltä"
        },
        {
          "right": false,
          "text": "Käytettäessä canary releaseja, sovelluskehittäjät testaavat sovelluksen toimivuutta ns. staging-palvelimella"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 118,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Käytettäessä feature brancheja uusi toiminnallisuus, esim. user story toteutetaan ensin omassa versionhallinnan haarassa, ja yhdistetään kehityksen päähaaraan vasta kun se on valmiina"
        },
        {
          "right": true,
          "text": "Trunk based development ei suosi feature branchien käyttöä, kaikki koodi pyritään integroimaan välittömästi pääkehityshaaraan"
        },
        {
          "right": true,
          "text": "DevOps-toimintamallia sovellettaessa kehittäjät ja järjestelmäylläpitäjät toimivat tiiviissä yhteistyössä"
        },
        {
          "right": true,
          "text": "Infrastructure as Code tarkottaa suurinpiirtein sitä, että sovelluksien käyttämiä palvelinympäristöjä hallinnoidaan koodin avulla käsiteltävillä konfiguraatiotiedostoilla, joita voidaan esim. tallettaa versionhallintaan normaalin ohjelmakoodin tapaan"
        },
        {
          "right": false,
          "text": "Trunk based development on kiinnostava idea, mutta se sopii lähinnä pienten startup-yritysten käyttöön"
        },
        {
          "right": false,
          "text": "Trunk based development -kehitysmallia on mahdotonta soveltaa, jos sovellukseen on toteutettava niin isoja toiminnallisuuksia, että niiden tekemiseen menee kauemmin kuin päivä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 119,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston arkkitehtuuri määrittelee sen rakenteen suuret linjat, eli minkälaisista rakennekomponenteista ohjelmisto koostuu"
        },
        {
          "right": true,
          "text": "Arkkitehtuuri ohjaa sitä miten sovellusta tulee jatkokehittää"
        },
        {
          "right": false,
          "text": "Ohjelmiston toimintaympäristön ja toteutusteknologioiden ei tule koskaan antaa vaikuttaa ohjelmiston arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Arkkitehtuurityyli määrää sen, mitä luokkia ja metodeja ohjelmistossa on"
        },
        {
          "right": false,
          "text": "Ohjelmiston ei-toiminnallisilla vaatimuksilla ei ole vaikutusta sen arkkitehtuuriin"
        },
        {
          "right": false,
          "text": "Sovelluksen arkkitehtuuri on pysyvä, ts. alussa valittua arkkitehtuuria ei koskaan muuteta."
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 120,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kerrosarkkitehtuuri tähtää siihen, että tietyn kerroksen koodiin tehtävät muutokset aiheuttaisivat mahdollisimman vähän muutoksia sovelluksen muihin osiin"
        },
        {
          "right": true,
          "text": "Kerrosarkkitehtuuria sovellettaessa käyttöliittymästä huolehtiva koodi on eristetty esimerkiksi sovelluslogiikaasta huolehtivasta koodista"
        },
        {
          "right": true,
          "text": "Mikropalveluarkkitehtuuri mahdollistaa sovelluksen toteuttamisen useita eri ohjelmointikieliä käyttäen"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuuria sovellettaessa jokainen user story toteutetaan omana mikropalveluna"
        },
        {
          "right": false,
          "text": "Kerrosarkkitehtuurissa eri kerroksilla oleva koodi keskustelee ainoastaan verkon välityksellä, eli esimerkiksi käyttöliittymästä ei koskaan kutsuta suoraan sovelluslogiikkakerroksen metodeja"
        },
        {
          "right": false,
          "text": "Mikropalveluarkkitehtuurin suurimpia etuja on niiden helppo testaaminen ja debuggaaminen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 121,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Inkrementaalinen arkkitehtuuri tarkoittaa sitä, että ohjelman lopullinen arkkitehtuuri muodostuu projektin edetessä"
        },
        {
          "right": true,
          "text": "Inkrementaalista arkkitehtuuria sovellettaessa esimerkiksi sovelluksen kerrosrakenne toteutetaan ainakin jossain muodossa jo varhaisessa vaiheessa projektia, jopa ensimmäisessä sprintissä"
        },
        {
          "right": true,
          "text": "Ketteriä menetelmiä sovellettaessa tunnustetaan se tosiasia, että vaatimusten tapaan saattaa myös arkkitehtuuria joutua mukauttamaan projektin aikana"
        },
        {
          "right": false,
          "text": "Jos kehitystiimi rakentaa arkkitehtuurin inkrementaalisesti, ei arkkitehtuuria dokumentoida millään tavalla"
        },
        {
          "right": false,
          "text": "Walking skeleton tarkoittaa koodia, joka tullaan heittämään pois kun ohjelman ominaisuudet valmistuvat"
        },
        {
          "right": false,
          "text": "Inkrementaalinen suunnittelu ja arkkitehtuuri takaavat sen, että ohjelmistosta tulee rakenteeltaan laadukas"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 122,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kapseloinnilla tarkoitetaan toteutustason yksityiskohtien piilottamista"
        },
        {
          "right": true,
          "text": "Metoditason koheesio pyrkii siihen, että yksittäinen metodi keskittyy ainoastaan yhteen asiaan kerrallaan. Jos metodi tekee liian monia asioita, sen koheesio paranee jos metodi jaetaan useammaksi metodiksi"
        },
        {
          "right": true,
          "text": "Mikropalveluissa yksittäisen palvelun koheesion taso on korkea ja ne kapseloivat sisäiset toimintaperiaatteensa muilta palveluilta"
        },
        {
          "right": true,
          "text": "Luokkatason koheesio ja single responsibility -periaate tarkoittavat samaa asiaa"
        },
        {
          "right": false,
          "text": "Ohjelmiston sisäisellä laadulla tarkoitetaan sitä, että koodin käyttämät tietorakenteet ja algoritmit tarjoavat optimaalisen nopean toiminnallisuuden kuhunkin käyttötarkoitukseen"
        },
        {
          "right": false,
          "text": "Single responsibility -periaate ei ole relevantti käytettäessä muita ohjelmointiparadigmoja kuin olio-ohjelmointia"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "4",
      "id": 123,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Code smell eli koodihaju on merkki siitä, että koodin sisäisessä laadussa on todennäköisesti ongelmia"
        },
        {
          "right": true,
          "text": "Tekninen velka on metafora sille, että koodin sisäinen rakenne on heikkoa"
        },
        {
          "right": false,
          "text": "Nykyisten parhaiden käytänteiden mukaan koodi tulee kommentoida huolellisesti, esim. jokaisesta koodissa olevasta muuttujasta tulee selittää mikä tietoa muuttuja tallettaa"
        },
        {
          "right": false,
          "text": "Refaktoroinnilla muutetaan luokkien metodeja siten, että niiden toiminnallisuus vastaa paremmin asiakkaiden tarpeita"
        },
        {
          "right": false,
          "text": "Refaktorointia ei kannata suorittaa jokaisessa sprintissä, se laskisi liikaa kehitystiimin velositeettia"
        },
        {
          "right": false,
          "text": "Teknistä velkaa tulee välttää kaikissa olosuhteissa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 127,
      "title": "Mitkä seuraavista ovat leanin mukaan hukkaa (muda)?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Välivarastointi"
        },
        {
          "right": true,
          "text": "Ylituotanto"
        },
        {
          "right": true,
          "text": "Odotus"
        },
        {
          "right": true,
          "text": "Tuotteessa olevat viat"
        },
        {
          "right": false,
          "text": "Taukojen pitäminen"
        },
        {
          "right": false,
          "text": "Koulutus"
        },
        {
          "right": false,
          "text": "Toimintojen ulkoistaminen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 128,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Kaizen tarkoittaa työskentelytapojen jatkuvaan parantamisen kannustavaa asennetta"
        },
        {
          "right": true,
          "text": "Jatkuva parantaminen pyrkii etsimään ongelmien perimmäisen syyn (root cause) ja eliminoimaan sen"
        },
        {
          "right": true,
          "text": "Pull- tai JIT-periaatteilla tarkoitetaan sitä, että tuotetta tai sen tarvitsemia komponentteja valmistetaan vasta tilauksesta, eli ei varalta etukäteen"
        },
        {
          "right": true,
          "text": "Kanban on eräs työkalu pull- tai JIT-periaatteen toteuttamiseen"
        },
        {
          "right": false,
          "text": "Lean pyrkii maksimoimaan tuotantolaitteiden käyttöasteen"
        },
        {
          "right": false,
          "text": "Kaizen ei kosketa yrityksen rivityöntekijöitä, keskitason johto hoitaa kaizeniin liittyvät asiat"
        },
        {
          "right": false,
          "text": "Sykliaika tarkoittaa sitä, miten nopeasti jatkuvassa parannuksessa saadaan eliminoitua hukkaa aiheuttavat tekijät"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 129,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean suosii periaatetta, jossa päätökset tehdään mahdollisimman myöhäisessä vaiheessa, mutta ei kuitenkaan liian myöhään"
        },
        {
          "right": true,
          "text": "Osassa 2 mainitun 'hyvän backlogin' kriteerejä noudattava backlog on leanin periaatteiden mukainen"
        },
        {
          "right": false,
          "text": "Build quality in -periaatteen mukaan kannattaa keskittyä kalliimpien tuotteiden valmistamiseen. Esim. Applella periaate näkyy siinä, että firmalla ei ole halpoja puhelinmalleja"
        },
        {
          "right": false,
          "text": "Lean pyrkii sykliajan optimointiin henkilökohtaisilla bonuksilla"
        },
        {
          "right": false,
          "text": "Vesiputousmallissa suositut, hyvin tarkkaan tehdyt vaatimusmäärittelydokumentit ovat leanin periaatteiden mukaisia"
        },
        {
          "right": false,
          "text": "Vesiputousmallin suosima periaate tehdä sovelluksen testaus erillisenä lopussa tapahtuvana vaiheena on leanin periaatteiden mukainen käytäntö"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 130,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean-ideaalin mukainen johtaja hallitsee myös käytännön hands on -työskentelyn"
        },
        {
          "right": true,
          "text": "Tuotekehitykseen sovellettaessa lean pyrkii kiihdyttämään oppimista"
        },
        {
          "right": true,
          "text": "Leanin tuotekehityksen periaatteiden mukaan epävarmat asiat kannattaa selvittää varhaisessa vaiheessa"
        },
        {
          "right": false,
          "text": "Leanin tuotekehityksen 'set based concurrent development'-menetelmän idea on sama kuin iteratiivisessa ohjelmistokehityksessä, tuotetta laajennetaan ja parannellaan vähitellen iteraatio iteraatiolta"
        },
        {
          "right": false,
          "text": "Go see (kenchi genbutsu) -periaateen mukaan työntekijöiden tulee raportoida tekemisistä tarkasti managerille"
        },
        {
          "right": false,
          "text": "Scrum ei ole leanin periaatteiden mukainen, koska se on push-systeemi"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 131,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Scrum of scrums on periaate, jonka avulla pyritään hallitsemaan useita kehitystiimejä, jotka työskentelevät saman tuotteen parissa"
        },
        {
          "right": true,
          "text": "SAFe on hyvin tarkkaan dokumentoitu ja runsaasti erilaisia periaatteita ja henkilörooleja sisältävä laajan mittakaavan ketterä menetelmäkehys"
        },
        {
          "right": true,
          "text": "LeSS:iä sovellettaessa oletuksena on, että kehitetään yhtä tuotetta, jolla on yksi product owner. LeSS ei ota kantaa siihen, miten eri tuotteita kehittävät tiimit suhtautuvat toisiinsa"
        },
        {
          "right": false,
          "text": "LeSS lisää Scrumiin joukon kokonaan uudentyyppisiä palavereja sekä henkilörooleja"
        },
        {
          "right": false,
          "text": "LeSS suosittelee jakamaan työtä siten, että esimerkiksi yksi tiimi huolehtii sovelluksen frontendistä, yksi sovelluksen backendista ja yksi sovelluksen tietokannasta"
        },
        {
          "right": false,
          "text": "9 tai enemmän tiimiä sisältävässä LeSS huge -versiossa jokaiselle tiimille on varattu oma product backlog"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "5",
      "id": 132,
      "title": "Mitkä seuraavista väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ketteriä menetelmiä käytetään nykyään useimpien tutkimusten mukaan yli 50% kaikista ohjelmistoprojekteista"
        },
        {
          "right": true,
          "text": "Tutkimusten mukaan yllättävän monet ketteriä menetelmiä soveltavat eivät kuitenkaan noudata monia ketteryyden perusperiaatteita esimerkiksi lyhyitä iteraatiota"
        },
        {
          "right": true,
          "text": "Erään tutkimuksen mukaan jatkuva käyttöönotto (continuous deployment) on ollut käytössä jopa kolmasosalla vastaajista"
        },
        {
          "right": false,
          "text": "Ketterien menetelmien nousu näyttää olevan takana, esim. Yhdysvaltojen hallituksen alaisissa projekteissa ketteriä menetelmiä ei enää käytetä yhtä paljon kuin esimerkiksi 10 vuotta sitten, kun Scrum-hype oli suurimmillaan"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suuret ohjelmistoprojektit onnistuvat suuremmalla todennäköisyydellä kuin pienet projektit"
        },
        {
          "right": false,
          "text": "Tutkimusten mukaan suurin ketteryyden tuoma hyöty on sen kustannustehokkuus"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 137,
      "title": "(1) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartlyn toimiala on Facebook-mainostus"
        },
        {
          "right": true,
          "text": "Tärkeä motivaatio automaattisille testeille on varmistua siitä, että jo toimineet asiat eivät hajoa kun koodia muokataan"
        },
        {
          "right": true,
          "text": "End to end -testit testaavat järjestelmää kokonaisuudessaan, kurssin käyttämän terminologian <i>järjestelmätestit</i> ovat siis end to end -testejä"
        },
        {
          "right": false,
          "text": "Smartyllä tiimirakene vastaa ohjelmiston arkkitehtuurisia kerroksia, eli esim. sovelluksen käyttöliittymästä on vastuussa oma tiiminsä"
        },
        {
          "right": false,
          "text": "Automatisoidut testit ovat hyvä keino löytää ohjelmistosta kokonaan uudenlaisia bugeja"
        },
        {
          "right": false,
          "text": "Kattava yksikkötestaus on riittävä tapa saavuttaa täysi luottamus sille, että ohjelmisto toimii oikein"
        },
        {
          "right": false,
          "text": "End to end -testeissä kutsutaan myös ulkoisten palveluiden esimerkiksi Facebookin rajapintoja"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 138,
      "title": "(2) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "API-testeillä voidaan testata esimerkiksi yksittäistä mikropalvelua kokonaisuudessaan"
        },
        {
          "right": true,
          "text": "Yksikkötestit eivät käytä tietokantaa"
        },
        {
          "right": true,
          "text": "End to end -testit suoritetaan käyttöliittymän läpi"
        },
        {
          "right": true,
          "text": "End to end -testien huono puoli on se, että ne ovat usein riippuvaisia käyttöliittymässä esitettävän datan muodosta"
        },
        {
          "right": false,
          "text": "Integraatiotestit eivät käytä tietokantaa"
        },
        {
          "right": false,
          "text": "Yksikkötestit tekevät usein HTTP-pyyntöjä verkossa oleviin rajapintoihin"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 139,
      "title": "(3) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Testipyramidi antaa erään suosituksen sille, kuinka paljon testausta kannattaa kohdentaa eri testauksen tasoille"
        },
        {
          "right": true,
          "text": "Monien startupien tapaan Smartyllä oli tilanne aluksi se, että automatisoituja testejä ei ollut"
        },
        {
          "right": true,
          "text": "Jos koodissa havaitaan bugi, kannattaa bugikorjauksen lisäksi tehdä testit, jotka varmistavat ettei sama bugi palaa koodiin uudelleen"
        },
        {
          "right": false,
          "text": "Kokonaan ilman automaattisia testejä olevan 'legacy'-koodin testauksen automatisointi kannattaa aloittaa yksikkötesteistä"
        },
        {
          "right": false,
          "text": "Startup-yrityksen kannattaa rakentaa kattavat automaattiset testit jo siinä vaiheessa kun ns. 'product market -fit' on vielä löytymättä"
        },
        {
          "right": false,
          "text": "Testipyramidin mukaista jakaumaa eri tason testien määrään suhteen kannattaa noudattaa aina heti ohjelmakomponentin, esim. mikropalvelun toteuttamisen ensimmäisestä päivästä alkaen"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 140,
      "title": "(4) Mitkä seuraavista Juha Viljasen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Smartly ei enää käytä ollenkaan end to end -testejä sillä kokemus niistä oli huono, testit rikkoontuivat välillä ilman mitään syytä"
        },
        {
          "right": true,
          "text": "Smartlyllä koodiin tehtävät lisäykset katselmoidaan pull requestien (PR) kautta"
        },
        {
          "right": true,
          "text": "Smartly julkaisee feature togglejen avulla joitain koodiin tulevia muutoksia/toiminnallisuuksia aluksi vain osalle asiakkaista"
        },
        {
          "right": false,
          "text": "Smartlyllä on yhtenäiset testauskäytänteet, tämän takia jokainen tiimi testaa vastuullaan olevaa ohjelmiston osaa samalla tavalla"
        },
        {
          "right": false,
          "text": "Smartlyllä ohjelmiston laadusta vastaa erillinen laadunhallintaan keskittyvä QA-tiimi"
        },
        {
          "right": false,
          "text": "Smartlyllä koodia testataan manuaalisesti ennen kuin se päästetään tuotantokäyttöön"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 141,
      "title": "(1) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Saavutettavuus/esteettömyys tarkoittaa sitä, että tuotteen on tarjottava sama kokemus käyttäjän rajoitteista huolimatta"
        },
        {
          "right": true,
          "text": "Käyttökokemussuunnittelun (UX design) on mukautunut ketteryyteen paljon ohjelmistokehitystä hitaammin"
        },
        {
          "right": true,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) on iteratiivinen menetelmä käyttökokemussuunnitteluun"
        },
        {
          "right": false,
          "text": "Käyttökokemussuunnittelun (UX design) katsotaan syntyneen 1980-luvulla piilaaksossa Microsoftin tuotekehityslaboratoriossa"
        },
        {
          "right": false,
          "text": "Tarkka, etukäteen tapahtuva suunnittelu on onnistuneen käyttökokemuksen luomisen edellytys"
        },
        {
          "right": false,
          "text": "Käyttäjäkeskeinen suunnittelu (User centric design) määrittelee erään tarkan ohjeiston sille, miten käyttökokemussuunnittelua tulee tehdä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 142,
      "title": "(2) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Lean UX suosittelee sijoittamaan designerit osaksi ohjelmistokehitystiimejä"
        },
        {
          "right": true,
          "text": "Lean UX pyrkii siihen että työtä edistetään pienissä paloissa ja eritasoisia aikaansaannoksia julkaistaan nopeassa syklissä"
        },
        {
          "right": true,
          "text": "Erehdykset salliva kulttuuri kuuluu Lean UX:ään"
        },
        {
          "right": false,
          "text": "Ketterässä käyttökokemussuunnittelussa (Agile UX) ovat avainasemassa tarkat eli ns. pixel perfect -tasolla tehdyt layout-suunnitelmat"
        },
        {
          "right": false,
          "text": "Lean UX:ssä käyttökokemuksen määrittelee firman johtava suunnittelija, eli ns. UX-ninja"
        },
        {
          "right": false,
          "text": "Lean UX suosittelee että käyttäjätestaus tehdään kontrolloiduissa laboratorio-olosuhteissa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "6",
      "id": 143,
      "title": "(3) Mitkä seuraavista Niko Laitisen luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design sprintti on menetelmä, jonka avulla käydään lyhyessä ajassa läpi kaikki design-prosessin vaiheet, motivaationa esim. alustavan liiketoimintakonseptin luominen"
        },
        {
          "right": true,
          "text": "Design systeemi määrittelee esimerkiksi yrityksen web-sivuston graafisen ulkoasun"
        },
        {
          "right": true,
          "text": "Design systeemi saattaa tarjota joukon muotoilultaan valmiita käyttöliittymäkomponentteja"
        },
        {
          "right": false,
          "text": "Oikeaoppisessa Lean UX -menetelmässä joka toinen sprintti on Design sprintti ja joka toinen normaali sovelluskehitykseen keskittyvä sprintti"
        },
        {
          "right": false,
          "text": "Design sprintin pituus on aina viikko"
        },
        {
          "right": false,
          "text": "Käytettävyyssuunnittelu on taidetta, tieteellisellä ajattelulla ei ole roolia käytettävyyssuunnittelussa"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 148,
      "title": "(1) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Nykyään on tyypillistä, että sovelluskehittäjä joutuu käyttämään useita eri ohjelmointikieliä jopa yhdessä projektissa työskennellessään"
        },
        {
          "right": true,
          "text": "Ei ole olemassa vain yhtä tapaa kouluttautua ohjelmistoalalle"
        },
        {
          "right": false,
          "text": "Ketterän manifestin mukaiset itseorganisoituvat tiimit ovat utopia, niillä ei ole sijaa nykyisessä bisneksessä, tiimien tulee työskennellä tiukan ulkoisen ohjauksen varassa"
        },
        {
          "right": false,
          "text": "Softa-alalla menestyksekkäästi toimimiseen tarvitaan nykyään täysin erilainen mindset, eli mielenlaatu/ajattelutapa kuin 80-luvulla"
        },
        {
          "right": false,
          "text": "Jos osaat hyvin yhden teknologian, pärjäät sen avulla ohjelmistoalalla jopa vuosikymmeniä"
        },
        {
          "right": false,
          "text": "On parasta koostaa ohjelmistotiimi mahdollisimman samankaltaisista ihmisistä, liika erilaisuus ihmisten taustoissa vaikeuttaa asiakkaiden tarpeiden ymmärtämistä"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 149,
      "title": "(2) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Ohjelmiston uusia versiota kannattaa viedä (eli 'shipata') tuotantoon niin usein kuin mahdollista, jopa yli 10 kertaa päivässä"
        },
        {
          "right": true,
          "text": "Ensimmäisenä mieleen tuleva tekninen ratkaisu kannattaa usein kyseenalaistaa"
        },
        {
          "right": false,
          "text": "Isojen IT-organisaatioiden on huomattavasti helpompi ottaa huomioon asiakkaan tarpeet kuin pienten ketterien tiimien"
        },
        {
          "right": false,
          "text": "Sovelluskehittäjien ei ole tarvetta ymmärtää bisneksen tarpeita tai sovelluksen arkkitehtuuriratkaisuja, riittää että sovelluskehittäjä maksimoi tuotantokäyttöön vietävän koodin määrään"
        },
        {
          "right": false,
          "text": "Sovelluksen laadunhallinta kannattaa tehdä laadunhallintaan varatuissa sprinteissä, joita pidetään noin 4-5 sprintin välein"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 150,
      "title": "(3) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Retrospektiiveja ei tulisi jättää pitämättä"
        },
        {
          "right": true,
          "text": "Sprintin aikaisesta työskentelystä noin 10% tulisi kohdistua seuraavien sprinttien aikana toteutettavien storyjen valmisteluun"
        },
        {
          "right": false,
          "text": "Paras sprintin pituus on 4 viikkoa"
        },
        {
          "right": false,
          "text": "Eräs Elisan parhaista käytänteistä ovat ns. tekniset storyt, eli storyt joiden toteuttaminen ei yleensä näy käyttäjälle mitenkään"
        },
        {
          "right": false,
          "text": "Teknistä velkaa ei tule ottaa missään olosuhteissa"
        },
        {
          "right": false,
          "text": "Niin sanotun Nokia-testin voi läpäistä ainoastaan, jos ennen toteutusvaihetta pidetään joukko spesifikaatiosprinttejä, joiden aikana ohjelmisto määritellään tarkasti"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 151,
      "title": "(4) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Hyvin toimiva jatkuva integraatio (CI) vaikuttaa parhaimmillaan organisaation suorituskykyyn jopa liiketoiminnan tasolla"
        },
        {
          "right": true,
          "text": "Yli muutaman päivän pituisia feature brancheja ei kannata käyttää"
        },
        {
          "right": true,
          "text": "Jos jatkuvan integraation (CI) 'build' hajoaa, eli koodi ei käänny, tai jokin testi ei mene läpi, tulee ongelma korjata heti"
        },
        {
          "right": true,
          "text": "Sen koodin määrä joka ei ole tuotantokäytössä tulee minimoida"
        },
        {
          "right": false,
          "text": "Jatkuva integraatio (CI) toimii ainoastaan sellaisissa ohjelmistoissa, joita kehittää yksi tai korkeintaan pari tiimiä. Isommassa skaalassa ohjelmistoja kehitettäessä CI:n käyttö olisi liian suuri hidaste"
        },
        {
          "right": false,
          "text": "Jatkuva integraation (CI) soveltaminen onnistuu ainoastaan pilvipalveluina toteutetuille web-sovelluksille"
        },
        {
          "right": false,
          "text": "CI-palvelimen status, eli onko kaikki hyvin vai onko esim. testeissä ongelmia, tulee pitää kehitystiimin sisäisenä asiana"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 152,
      "title": "(5) Mitkä seuraavista Hannu Kokon luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Suurin hukka ohjelmistokehityksessä on se, että rakennetaan asiakkaan tarpeiden kannalta kokonaan vääränlainen järjestelmä"
        },
        {
          "right": true,
          "text": "Lean-startup-menetelmällä testataan idean tarpeellisuutta/hyödyllisyyttä oikeilla käyttäjillä"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä jokaisella tiimillä voi olla oma Definition of done"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä osan tiimeistä kannattaa erikoistua joihinkin osa-alueisiin, esimerkiksi testaamiseen"
        },
        {
          "right": false,
          "text": "Ohjelmistokehittäjille kannattaa antaa henkilökohtaisia suoriutumistavoitteita jotka vaikuttavat suoraan palkkaukseen, näin myös tiimit saadaan työskentelemään mahdollisimman tehokkaasti"
        },
        {
          "right": false,
          "text": "Monen tiimin ketterässä kehityksessä eri tiimien jäsenet eivät yleensä keskustele suoraan keskenään, keskustelu hoidetaan tiimien scrum masterien kautta"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 153,
      "title": "(1) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Erään määritelmän mukaan DevOps tarkoittaa sovelluskehittäjien ja järjestelmäylläpitäjien välistä yhteistyötä"
        },
        {
          "right": true,
          "text": "DevOpsiin liittyvät työkalut auttavat keräämään monenlaista informaatiota tuotantoympäristöstä ja täten tekemään sovelluksen toiminnallisuuteen liittyviä kokeiluja"
        },
        {
          "right": true,
          "text": "Sovellus tulisi viedä tuotantoympäristöön heti kehitystyön alkuvaiheessa, jopa jo ensimmäisenä päivänä, ennen kuin sovelluksessa on juurikaan valmiina olevaa toiminnallisuutta"
        },
        {
          "right": true,
          "text": "Eräs pilviympäristöjen hyvistä puolista on se, että ne antavat sovelluskehittäjille mahdollisuuden julkaista koodia suoraan tuotantoympäristöön"
        },
        {
          "right": false,
          "text": "DevOpsia soveltamalla on mahdollista korvata testausautomaatio"
        }
      ]
    },
    {
      "courseId": "2",
      "part": "7",
      "id": 154,
      "title": "(2) Mitkä seuraavista Marko Klemetin luentoon liittyvistä väittämistä pitävät paikkaansa?",
      "desc": "",
      "options": [
        {
          "right": true,
          "text": "Design-systeemi dokumentoi yrityksen visuaalisen ilmeen ja saattaa jopa tarjota uudelleenkäytettäviä, visuaalista ilmettä noudattavia käyttöliittymäkomponentteja"
        },
        {
          "right": true,
          "text": "ROBOT-framework on hyväksymistestauksen työkalu, missä testit kirjoitetaan asiakkaan ymmärtämällä kielellä"
        },
        {
          "right": true,
          "text": "GitHub actions ja Jenkins ovat jatkuvaan integraatioon (CI) sopivia palveluita"
        },
        {
          "right": false,
          "text": "Paras käytänne DevOpsin soveltamiseen on muodostaa yritykseen erillinen DevOps-tiimi, joka hoitaa tuotantojärjestelmien ja deployment-pipelinen konfiguroinnin"
        },
        {
          "right": false,
          "text": "Jatkuvan integraation (CI) ja jatkuvan julkaisun (CD) konfiguraatioita ei kannata tallettaa versionhallintaan"
        },
        {
          "right": false,
          "text": "DevOpsin käyttöönotossa tärkeimmässä asemassa on sopivien työkalujen tehokas käyttö"
        }
      ]
    }
  ]
}
